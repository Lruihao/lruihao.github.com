<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>round - 标签 | 菠菜眾長</title><link>https://lruihao.cn/tags/round/</link><description>round - 标签 | 菠菜眾長</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1024@lruihao.cn (Lruihao)</managingEditor><webMaster>1024@lruihao.cn (Lruihao)</webMaster><copyright>本站内容采用 CC BY-NC-SA 4.0 国际许可协议。</copyright><lastBuildDate>Mon, 29 Jul 2024 20:32:39 +0800</lastBuildDate><atom:link href="https://lruihao.cn/tags/round/" rel="self" type="application/rss+xml"/><item><title>现代 CSS 解决方案：CSS 四舍五入数值单位</title><link>https://lruihao.cn/posts/css-round/</link><pubDate>Mon, 29 Jul 2024 20:32:39 +0800</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/css-round/</guid><description><![CDATA[<p>本文将介绍另外一个非常实用的 CSS 数学函数 - <code>round()</code> 及其实际应用场景。</p>
<h2 id="何为-css-round-函数" class="heading-element"><span>1 何为 CSS round 函数</span>
  <a href="#%e4%bd%95%e4%b8%ba-css-round-%e5%87%bd%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>这是一个比较新的 CSS 函数，在 <a href="https://drafts.csswg.org/css-values/#funcdef-round"target="_blank" rel="external nofollow noopener noreferrer">CSS Values and Units Module Level 4<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 规范中提出，自 2024 年 5 月起，此功能适用于最新设备和浏览器版本。此功能可能无法在较旧的设备或浏览器中使用。</p>
</blockquote>
<p>CSS <code>round()</code> 函数<strong>根据选定的舍入策略返回舍入数</strong>。</p>
<p>作者应使用自定义 CSS 属性（例如 <code>--my-property</code>）作为舍入值、间隔或两者兼而有之；如果这些函数具有已知值，使用 <code>round()</code> 函数显然不太必要。</p>
<h3 id="语法规则" class="heading-element"><span>1.1 语法规则</span>
  <a href="#%e8%af%ad%e6%b3%95%e8%a7%84%e5%88%99" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p><code>round()</code> 的完整语法规则还是比较复杂的。完整的介绍可以看 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/round"target="_blank" rel="external nofollow noopener noreferrer">MDN - round()<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="nt">round</span><span class="o">()&gt;</span> <span class="o">=</span> <span class="nt">round</span><span class="o">(</span> <span class="o">&lt;</span><span class="nt">rounding-strategy</span><span class="o">&gt;?,</span> <span class="o">&lt;</span><span class="nt">valueToRound</span><span class="o">&gt;</span> <span class="o">,</span> <span class="o">&lt;</span><span class="nt">roundingInterval</span><span class="o">&gt;</span> <span class="o">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>round(&lt;rounding-strategy&gt;, valueToRound, roundingInterval)</code> 函数指定可选的舍入策略、要舍入的值（或数学表达式）和舍入间隔（或数学表达式）。根据舍入策略，<code>valueToRound</code> 四舍五入到 <code>roundingInterval</code> 的最接近整数倍。</p>
<ul>
<li><code>&lt;rounding-strategy&gt;</code>: 可选参数，表示舍入策略。这可能是以下值之一：
<ul>
<li><code>up</code>: 相当于 JavaScript Math.ceil() 方法，将 valueToRound 向上舍入到 roundingInterval 最接近的整数倍。这相当于 JavaScript Math.ceil() 方法。</li>
<li><code>down</code>: 将 valueToRound 向下舍入为 roundingInterval 最接近的整数倍。这相当于 JavaScript Math.floor() 方法。</li>
<li><code>nearest</code>: 将 valueToRound 舍入为 roundingInterval 的最接近的整数倍，该倍数可以高于或低于该值。如果 valueToRound 是上方和下方舍入目标之间的一半，则会向上舍入。相当于 JavaScript Math.round()。</li>
<li><code>to-zero</code>: 将 valueToRound 舍入为 roundingInterval 接近/接近零的最接近整数倍。这相当于 JavaScript Math.trunc() 方法。</li>
</ul>
</li>
<li><code>&lt;valueToRound&gt;</code>: 需要被四舍五入的值。必须是 <code>&lt;number&gt;</code>、<code>&lt;dimension&gt;</code> 或 <code>&lt;percentage&gt;</code>，或者解析为这些值之一的数学表达式。</li>
<li><code>&lt;roundingInterval&gt;</code>: 舍入的间隔规则。这是一个 <code>&lt;number&gt;</code>、<code>&lt;dimension&gt;</code> 或 <code>&lt;percentage&gt;</code>，或者解析为这些值之一的数学表达式。</li>
</ul>
<h3 id="示例" class="heading-element"><span>1.2 示例</span>
  <a href="#%e7%a4%ba%e4%be%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">width</span><span class="o">:</span> <span class="nt">round</span><span class="o">(</span><span class="nt">var</span><span class="o">(</span><span class="nt">--width</span><span class="o">),</span> <span class="nt">50px</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="nt">width</span><span class="o">:</span> <span class="nt">round</span><span class="o">(</span><span class="nt">up</span><span class="o">,</span> <span class="nt">101px</span><span class="o">,</span> <span class="nt">var</span><span class="o">(</span><span class="nt">--interval</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="nt">width</span><span class="o">:</span> <span class="nt">round</span><span class="o">(</span><span class="nt">down</span><span class="o">,</span> <span class="nt">var</span><span class="o">(</span><span class="nt">--height</span><span class="o">),</span> <span class="nt">var</span><span class="o">(</span><span class="nt">--interval</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="nt">margin</span><span class="o">:</span> <span class="nt">round</span><span class="o">(</span><span class="nt">to-zero</span><span class="o">,</span> <span class="nt">-105px</span><span class="o">,</span> <span class="nt">10px</span><span class="o">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p>MDN 官方写了一个完整的例子，可以看 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/round"target="_blank" rel="external nofollow noopener noreferrer">Playground | MDN<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>。</p>
<h2 id="有什么用" class="heading-element"><span>2 有什么用</span>
  <a href="#%e6%9c%89%e4%bb%80%e4%b9%88%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>上面讲了一大堆概念，那这玩意到底有什么用勒？</p>
<p>好好好，那就再回想一下在此之前我们开发中遇到的痛点吧：</p>
<ul>
<li>解决基于 transform 的模糊问题</li>
<li>使用 <code>round()</code> 模拟步骤缓动动画</li>
<li>解决百分比或者 <code>rem</code> 单位的四舍五入问题</li>
</ul>
<p>前两点可以看 ChokCoco 的文章 <a href="https://www.cnblogs.com/coco1s/p/17676226.html"target="_blank" rel="external nofollow noopener noreferrer">现代 CSS 解决方案：数学函数 Round<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，里面有详细的讲解。</p>
<p>而我遇到的主要问题就是第三点，也就是由于浏览器渲染机制，导致有时百分比或者 <code>rem</code> 的单位实际计算值为小数的情况引起的系列问题。</p>
<p>造成这个现象的主要原因有：</p>
<ul>
<li>像素单位和设备像素比（DPR）</li>
<li>浏览器的子像素渲染偏差</li>
</ul>
<p>举个例子吧：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">container</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">child</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mf">33.33</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果容器 <code>.container</code> 中有三个 <code>.child</code> 元素，那么每个 <code>.child</code> 的理论宽度应该是 <code>33.33px</code>。然而，由于不能将像素拆分，浏览器采取四舍五入方式处理，从而得到了 <code>33px</code> 或 <code>34px</code> 的结果。然而，为了保持布局的精确性，浏览器实际上以子像素的方式保存了这些值，并且在渲染时考虑了这部分差异。</p>
<p>但是！！！坑爹的是，不同浏览器的处理方式也会不同，还有就是子孙节点继承宽度时可能会有四舍五入导致子孙节点宽度大于父节点宽度的问题。</p>
<h2 id="实际场景应用" class="heading-element"><span>3 实际场景应用</span>
  <a href="#%e5%ae%9e%e9%99%85%e5%9c%ba%e6%99%af%e5%ba%94%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>在 FixIt 主题中，页面内容分为左、中、右三栏：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scss" data-lang="scss"><span class="line"><span class="cl"><span class="nc">.wrapper</span> <span class="nt">main</span><span class="nc">.container</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="na">display</span><span class="o">:</span> <span class="ni">flex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">align-items</span><span class="o">:</span> <span class="ni">flex-start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">justify-content</span><span class="o">:</span> <span class="ni">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">padding-inline</span><span class="o">:</span> <span class="mi">1</span><span class="kt">rem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">gap</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">rem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nc">.page</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="na">width</span><span class="o">:</span> <span class="mi">56</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nn">#comments</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 评论区域 iframe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nt">iframe</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>例如在 <code>1440px</code> 的屏幕上，中间内容宽度应该为 <code>(1440 - 2 * 16) * 0.56 = 788.48px</code>，实际渲染结果却是是 <code>788.48px</code>。</p>
<p>问题来了，在内容的最后加上一个 giscus 评论区域，评论区域容器 <code>iframe</code> 和 <code>iframe</code> 里面的内容按理说应该都是 <code>788.48px</code>，但是实际渲染结果却是：</p>
<ul>
<li>评论容器 <code>iframe</code>：<code>788.48px</code></li>
<li><code>iframe</code> 内评论内容 HTML：<code>789px</code></li>
</ul>
<p>怎么说？无奈不，四舍五入，你舍掉其实这个场景我也就不纠结了，恰好它是符合<strong>五入</strong>的规则，向上 <code>1px</code> 取整了，导致的视觉上的影响就是 giscus 评论区域右侧的边框巧合不见了。—T_T—</p>
<p>那怎么搞勒，治标不治本的做法就是，把评论区 <code>#comments</code> 的宽度缩写一些，但是我不想这样做。</p>
<p>我想既然问题是小数点造成的，避免产生小数点不久好了，然后就用到了 <code>round()</code> 函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="p">.</span><span class="nc">page</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="mi">56</span><span class="kt">%</span><span class="p">,</span> <span class="mi">2</span><span class="kt">px</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我希望页面中间永远是偶数，这样可以同时避免左、中、右三个部分出现小数，所以这里的 <code>roundingInterval</code> 设置为 <code>2px</code>，表示四舍五入到 <code>2px</code> 的整数倍，这样就避免了小数点的问题。</p>
<p>好了，问题就这样愉快地解决了……吗？</p>
<p>好吧，并没有。—T_T—</p>
<h2 id="兼容性" class="heading-element"><span>4 兼容性</span>
  <a href="#%e5%85%bc%e5%ae%b9%e6%80%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>开头说了这是一个比较新的 CSS 函数，所以兼容性肯定是个问题。尽管<strong>截至 2024 年 7 月 29 日</strong>，<code>round()</code> 函数覆盖了 <strong>67.63%</strong> 的浏览器，并且在各类浏览器中的最新几个版本都得到了完全支持（忽略 IE），但是在一些老版本的浏览器中还是不支持的，如下图。</p>
<p class="ciu-embed" data-feature="mdn-css_types_round" data-past="2" data-future="1" data-observer="true" data-theme=""></p>
<p>那又怎么搞勒？要奔溃了，最讨厌兼容性了，也讨厌 Polyfill，但是毕竟 FixIt 主题不是我一个人在用，还是加一下 Polyfill 吧。</p>
<p>好家伙！没有 Polyfill 可用。真要奔溃了，前面都白折腾了？—T_T—</p>
<p>也不是没有办法，自己写一个，利用 <code>@supports</code> 写一些兼容性代码吧，不支持的就不用 <code>round()</code> 函数了。</p>
<p>上面简化后的例子兼容性可以这样写：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-scss" data-lang="scss"><span class="line"><span class="cl"><span class="c1">// 顺便提一下，大写 ROUND 是为了避免和 Sass 的 round 函数冲突，CSS 中对函数关键词大小写不敏感。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nc">.wrapper</span> <span class="nt">main</span><span class="nc">.container</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="na">display</span><span class="o">:</span> <span class="ni">flex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">align-items</span><span class="o">:</span> <span class="ni">flex-start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">justify-content</span><span class="o">:</span> <span class="ni">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">padding-inline</span><span class="o">:</span> <span class="mi">1</span><span class="kt">rem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">gap</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">rem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nc">.page</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="na">width</span><span class="o">:</span> <span class="nf">ROUND</span><span class="p">(</span><span class="mi">56</span><span class="kt">%</span><span class="o">,</span> <span class="mi">2</span><span class="kt">px</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nn">#comments</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 评论区域 iframe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nt">iframe</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="na">width</span><span class="o">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 如果不支持 round() 函数，回退到设定固定值 56%
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">@supports</span> <span class="nt">not</span> <span class="o">(</span><span class="nt">width</span><span class="nd">:</span> <span class="nt">ROUND</span><span class="o">(</span><span class="nt">56</span><span class="err">%</span><span class="o">,</span> <span class="nt">2px</span><span class="o">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nc">.page</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="na">width</span><span class="o">:</span> <span class="mi">56</span><span class="kt">%</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>好了，跌跌撞撞就这样了，等过两年 <code>round()</code> 函数覆盖率更高了我第一件事就是把上面的兼容性代码删掉。&#x1f602;</p>]]></description></item></channel></rss>