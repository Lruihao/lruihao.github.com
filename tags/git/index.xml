<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git 标签 | 菠菜眾長</title><link>https://lruihao.cn/tags/git/</link><description>Hugo FixIt 作者，喜欢瞎折腾、造轮子、写东西，分享一些前端开发中的所见、所闻、所思。</description><generator>Hugo 0.132.1 &amp; FixIt v0.3.10-1d651b5a</generator><language>zh-CN</language><managingEditor>1024@lruihao.cn (Lruihao)</managingEditor><webMaster>1024@lruihao.cn (Lruihao)</webMaster><copyright>本站内容采用 CC BY-NC-SA 4.0 国际许可协议。</copyright><lastBuildDate>Tue, 06 Aug 2024 14:11:51 +0800</lastBuildDate><atom:link href="https://lruihao.cn/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 统计代码量</title><link>https://lruihao.cn/posts/git-summary/</link><pubDate>Wed, 17 Jul 2024 16:06:08 +0800</pubDate><guid>https://lruihao.cn/posts/git-summary/</guid><description>&lt;p>使用 Git 命令统计在某段时间内项目中的代码量。&lt;/p></description></item><item><title>git submodule: already exists in the index</title><link>https://lruihao.cn/posts/6550187/</link><pubDate>Thu, 11 Jan 2024 10:30:04 +0800</pubDate><guid>https://lruihao.cn/posts/6550187/</guid><description>&lt;p>Git 报错 &amp;ldquo;git submodule: already exists in the index&amp;rdquo; 的解决方法。&lt;/p></description></item><item><title>SSH 提交签名验证</title><link>https://lruihao.cn/posts/ssh-sign/</link><pubDate>Sun, 22 Oct 2023 18:59:31 +0800</pubDate><guid>https://lruihao.cn/posts/ssh-sign/</guid><description>&lt;p>Git 支持使用 GPG 来签名提交记录。但 GPG 用起来很复杂，一直赖得搞。Git 从 2.34 开始支持使用 SSH 签名，所以本文将介绍如何使用 SSH 对提交进行签名。&lt;/p></description></item><item><title>解决 SourceTree 提交时候 husky 命令失败问题</title><link>https://lruihao.cn/posts/sourcetree-husky/</link><pubDate>Mon, 12 Jun 2023 10:58:44 +0800</pubDate><guid>https://lruihao.cn/posts/sourcetree-husky/</guid><description>1 问题描述 在使用 SourceTree 提交代码的时候，会出现 husky 命令失败的问题（通过命令行提交代码没有问题），如下图所示： 看错误，是一个 catch 参数的问题，在新版本的 Node 中，catch 参数是可以省略的，但是在旧版本中，catch 参数是必须的。 由于使用了 nvm 管理 Node 版本，项目中的 Node 是正常的，但是 SourceTree 使用的是系统的 Node，所以会出现这个</description></item><item><title>Commit Message Spec</title><link>https://lruihao.cn/posts/commit-spec/</link><pubDate>Fri, 12 Aug 2022 15:37:44 +0800</pubDate><guid>https://lruihao.cn/posts/commit-spec/</guid><description>&lt;!-- markdownlint-disable MD033 -->
&lt;p>Commit messages are short descriptions of changes to a repository. We should follow certain standards to effectively describe changes, such as the &lt;a href="https://www.conventionalcommits.org/en/v1.0.0-beta.4/"target="_blank" rel="external nofollow noopener noreferrer">Conventional Commits&lt;i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true">&lt;/i>&lt;/a> specification based on the &lt;a href="https://github.com/angular/angular/blob/68a6a07/CONTRIBUTING.md#commit"target="_blank" rel="external nofollow noopener noreferrer">Angular convention&lt;i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true">&lt;/i>&lt;/a> that is most used on GitHub, or each development team can simplify and formulate their own commit specification. This is not only conducive to the automatic generation of Changelog in the later stage, but more importantly, when a bug occurs, the entire warehouse can be quickly checked, the problem point can be accurately located, and the version can be reverted.&lt;/p></description></item><item><title>Mac 上的开发配置总结</title><link>https://lruihao.cn/posts/config4mac/</link><pubDate>Fri, 29 Jul 2022 20:22:44 +0800</pubDate><guid>https://lruihao.cn/posts/config4mac/</guid><description>&lt;p>记录一下使用 Mac 作为生产工具开发的一些基本配置和经验。&lt;/p></description></item><item><title>Hugo 使用 GitHub Actions 部署到 GithHb Pages 和 腾讯云 cos 桶</title><link>https://lruihao.cn/posts/github-actions/</link><pubDate>Mon, 04 Oct 2021 23:46:49 +0800</pubDate><guid>https://lruihao.cn/posts/github-actions/</guid><description>&lt;div class="details admonition quote open">
 &lt;div class="details-summary admonition-title">
 &lt;i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true">&lt;/i>解決痛點&lt;i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true">&lt;/i>
 &lt;/div>
 &lt;div class="details-content">
 &lt;div class="admonition-content">Github Actions 真是靜態博客的福音，有了它 hugo, hexo 等博客構建過程可以丟給 Github 的服務器幫我們做了。&lt;br>
也就是説實現了在線寫靜態博客的需求。&lt;/div>
 &lt;/div>
 &lt;/div></description></item><item><title>Web 开发规则，代码规范</title><link>https://lruihao.cn/posts/dev-rules/</link><pubDate>Thu, 15 Aug 2019 18:30:31 +0000</pubDate><guid>https://lruihao.cn/posts/dev-rules/</guid><description>1 精神 绝不写死代码，硬编码 不留不要用的、垃圾代码 2 Git Master 的 BUG 必须最少且趋近于零，为最稳定的版本 每次 Commit 信息应该准确填写。不可模棱两可，eg: 修复 BUG、增加功能 禁止 Commit IDE 的 project data，e.g: .vscode 禁止上传垃圾代码 更多规则详见文档 Commit 规范 2.1 分支（Branch） 命名规则：应以此分支主要目的命名（修复什么 BUG，新</description></item><item><title>hexo 博客源码备份</title><link>https://lruihao.cn/posts/blog-backup/</link><pubDate>Sat, 03 Nov 2018 12:49:28 +0000</pubDate><guid>https://lruihao.cn/posts/blog-backup/</guid><description>1 备份 hexo 博客 1 2 3 4 5 6 7 8 9 //如果 themes/next（主题文件）下面有。git，请删除这个。git 文件夹。 cd hexo git init //初始化本地仓库 git add source themes scaffolds _config.yml package.json package-lock.json //将必要的文件依次添加 git commit -m &amp;#34;blog hexo&amp;#34; git branch hexo //新建 hexo 分支 git checkout hexo //切换到 hexo 分支上 git remote add origin git@github.com:username/username.github.io.git //将本地与 Github 项目对接 git push origin hexo //push 到 Github 项目的 hexo 分支上 2 在其</description></item><item><title>Git 常用指令汇总</title><link>https://lruihao.cn/posts/git/</link><pubDate>Tue, 30 Oct 2018 08:59:56 +0800</pubDate><guid>https://lruihao.cn/posts/git/</guid><description>&lt;ul>
&lt;li>&lt;strong>工作区&lt;/strong>：就是你在电脑里能看到的目录。&lt;/li>
&lt;li>&lt;strong>暂存区&lt;/strong>：英文叫 stage, 或 index。一般存放在 &amp;ldquo;.git 目录下&amp;rdquo; 下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。&lt;/li>
&lt;li>&lt;strong>版本库&lt;/strong>：工作区有一个隐藏目录。git，这个不算工作区，而是 Git 的版本库。&lt;/li>
&lt;/ul></description></item><item><title>使用 Git 上传代码到 github, coding 等仓库</title><link>https://lruihao.cn/posts/gituse/</link><pubDate>Fri, 26 Oct 2018 21:11:02 +0000</pubDate><guid>https://lruihao.cn/posts/gituse/</guid><description>0.1 config 1 2 git config --global user.name &amp;#34;Your Name&amp;#34; git config --global user.email &amp;#34;email@example.com&amp;#34; 第一次使用 git 的时候需要设置提交者信息。 注意： 如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。 如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。 0.2 生成</description></item><item><title>linux/centos 下的安装 git</title><link>https://lruihao.cn/posts/linux-git/</link><pubDate>Sat, 22 Sep 2018 22:28:45 +0000</pubDate><guid>https://lruihao.cn/posts/linux-git/</guid><description>0.1 下载 git 1 wget https://github.com/git/git/archive/v2.14.1.zip 0.2 安装依赖 1 sudo yum -y install zlib-devel openssl-devel cpio expat-devel gettext-devel curl-devel perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker 0.3 解压 git 1 unzip v2.14.1.zip 注： unzip 命令用不了，具体步骤如下： 1 2 3 #yum list | grep zip/unzip #yum install zip #yum install unzip 基本完成，如果在编译的时候出现错误：gcc : error trying to exec 'cc1plus': execvp : No sunch file or directory 可以用gcc -v/g++ -v 来查看 gcc 版本，会发现没有安装。安装如下： 1 2 3 #yum list | grep gcc #yum install gcc-c++ #yum install unzip 0.4 将 git 安装到/usr/l</description></item><item><title>git index.lock</title><link>https://lruihao.cn/posts/git-index-lock/</link><pubDate>Tue, 14 Aug 2018 19:21:23 +0000</pubDate><guid>https://lruihao.cn/posts/git-index-lock/</guid><description>在 git 没有运行完成之前强制关闭，下次提交的时候会产以下生错误，或者类似的。 1 2 3 4 5 fatal: Unable to create &amp;#39;/xxx/xx/.git/index.lock&amp;#39;: File exists. If no other git process is currently running, this probably means a git process crashed in this repository earlier. Make sure no other git process is running and remove the file manually to continue. 原因是在你进行某些比较费时的 git 操作时自动生成，操作结束后自动删除，相当于一个锁定文件，目的在于防止对一个目录同时进行多个操作。 有时强制关</description></item></channel></rss>