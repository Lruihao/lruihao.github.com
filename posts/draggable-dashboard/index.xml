<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有拖拽式仪表盘的设计与开发 - 菠菜眾長</title><link>https://lruihao.cn/posts/draggable-dashboard/</link><description>所有拖拽式仪表盘的设计与开发 | 菠菜眾長</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1024@lruihao.cn (Lruihao)</managingEditor><webMaster>1024@lruihao.cn (Lruihao)</webMaster><copyright>本站内容采用知识共享署名-非商业性使用 4.0（CC BY-NC 4.0）国际许可协议。</copyright><lastBuildDate>Thu, 12 Oct 2023 15:16:48 +0800</lastBuildDate><atom:link href="https://lruihao.cn/posts/draggable-dashboard/" rel="self" type="application/rss+xml"/><item><title>拖拽式仪表盘 - 功能需求分析</title><link>https://lruihao.cn/posts/dashboard-analysis/</link><pubDate>Thu, 12 Oct 2023 15:37:30 +0800</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/dashboard-analysis/</guid><description><![CDATA[<h2 id="仪表盘简介">仪表盘简介</h2>
<p>仪表盘（dashboard）作为一种直观、灵活的数据可视化工具，正在越来越多地应用于各种领域，帮助用户实时监控和分析数据。常见于各类数据分析平台、数据可视化平台、数据大屏等场景。</p>
<p>传统的仪表盘往往是开发者固定好的，用户只能使用，无法自定义。而拖拽式仪表盘则可以让用户自由地选择、拖拽、调整仪表盘中的各种组件，从而实现自定义的仪表盘。</p>
<h2 id="功能需求">功能需求</h2>
<p>由于本系列文章写作在设计和开发之后，所以先一睹为快，看看最终的效果：<a href="https://lruihao.github.io/vue-el-demo/#/dashboard/index"target="_blank" rel="external nofollow noopener noreferrer">在线 Demo<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>技术背景是基于 Vue2 实现，功能需求大致如下：</p>
<h3 id="布局需求">布局需求</h3>
<p>仪表盘布局是拖拽式仪表盘的核心功能之一。布局应该是一个可复用的模板，因为对于一个中后台系统，往往会有多个仪表盘，所有基础功能应该提炼出来，以便于快速复用。</p>
<ul>
<li>组件拖放到布局容器中时，用户应能够自由拖拽、调整组件的大小和位置，也可以对组件进行排序、刷新、删除等操作</li>
<li>允许创建、删除、复制布局，每个布局可以有不同的组件排列</li>
</ul>
<h3 id="组件需求">组件需求</h3>
<ul>
<li>统一的配置项（宽高、是否可调整大小、各种事件钩子等）</li>
<li>组件分类</li>
<li>自动加载组件列表</li>
<li>组件独立（每个组件有自己完整的生命周期）</li>
</ul>
<p>每个组件应该拥有相同的配置项，以便于按照相同的规范限制进行后续的组件开发。</p>
<p>组件统一存放在一个文件夹中，仪表盘模板自动加载这个文件夹中的所有组件到组件列表。</p>
<p>组件列表中的组件可以通过拖拽或者点击添加到布局容器中。</p>
<p>组件需要有分类，例如：模块 A 的组件、模块 B 的组件等。因为虽然系统中的每个模块的仪表盘只需要显示当前模块相关的图表组件，但是整个系统的仪表盘需要显示各个模块的图表统计数据，所以需要对组件进行分类。</p>
<p>另外，应该有一个通用分类，用于存放所有模块都可以使用的组件。例如：便签、天气组件、时间组件等。</p>
<h3 id="布局和组件交互">布局和组件交互</h3>
<p>仪表盘布局内通常有多个组件，布局和组件之间可能需要进行交互，例如：</p>
<ul>
<li>点击总的刷新按钮，所有组件都刷新；点击某个组件的刷新按钮，只刷新当前组件</li>
<li>点击某个组件的设置按钮，弹出设置框，设置当前组件的配置项保存到当前布局数据中</li>
<li>点击某个组件的删除按钮，从当前布局数据中删除当前组件</li>
<li>……</li>
</ul>
<h3 id="用户角色和权限管理需求">用户角色和权限管理需求</h3>
<p>在拖拽式仪表盘中，不同用户角色可能具有不同的访问权限和操作权限。</p>
<p>管理员拥有完整的权限：</p>
<ul>
<li>可以查看所有仪表盘</li>
<li>可以编辑所有仪表盘</li>
<li>可以删除除默认仪表盘之外的所有仪表盘</li>
<li>可以拖拽、调整所有组件在仪表盘中的位置和大小</li>
</ul>
<p>普通用户只能永远部分权限：</p>
<ul>
<li>可以查看所有仪表盘</li>
<li>工作台仪表盘可以新增、删除、编辑组织内可见的仪表盘布局</li>
<li>工作台仪表盘可以拖拽、调整组件在非默认仪表盘布局中的位置和大小</li>
<li>其他模块的仪表盘只能查看和刷新，不能编辑</li>
</ul>
<h2 id="总结">总结</h2>
<p>通过分析，简单来说，拖拽式仪表盘的功能需求主要包括：</p>
<ul>
<li>布局需求</li>
<li>组件需求</li>
<li>布局和组件交互</li>
<li>用户角色和权限管理需求</li>
</ul>
<p>了解清楚需求后，下一篇文章将探讨拖拽式仪表盘的布局模板设计。</p>
]]></description></item><item><title>拖拽式仪表盘 - 布局模板文档</title><link>https://lruihao.cn/posts/dashborad-template-docs/</link><pubDate>Thu, 12 Oct 2023 19:27:49 +0800</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/dashborad-template-docs/</guid><description><![CDATA[<p><code>Dashboard</code> 组件 <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 是一个公共模板组件，用于快速创建 Dashboard 页面。</p>
<h2 id="basic-usage">Basic Usage</h2>
<ol>
<li>
<p>每个模块的 dashboard 页面可继承 <code>Dashboard</code> 组件，如：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Dashboard</span> <span class="nx">from</span> <span class="s1">&#39;@/components/Dashboard&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kr">extends</span><span class="o">:</span> <span class="nx">Dashboard</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用 <code>registerComponents</code> 函数注册组件，通用组件模板中默认已导入，模块组件需要自行导入，如：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Dashboard</span><span class="p">,</span> <span class="p">{</span> <span class="nx">registerComponents</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;@/components/Dashboard&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 加载 widgets 目录下所有组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">requireComponents</span> <span class="o">=</span> <span class="nx">require</span><span class="p">.</span><span class="nx">context</span><span class="p">(</span><span class="s1">&#39;./widgets&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="sr">/\.vue$/</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">components</span> <span class="o">=</span> <span class="nx">registerComponents</span><span class="p">(</span><span class="nx">requireComponents</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kr">extends</span><span class="o">:</span> <span class="nx">Dashboard</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">created</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 加载组件列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">addComponents</span><span class="p">(</span><span class="s1">&#39;组件分类&#39;</span><span class="p">,</span> <span class="nx">components</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>设置默认布局</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Dashboard</span><span class="p">,</span> <span class="p">{</span> <span class="nx">registerComponents</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;@/components/Dashboard&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kr">extends</span><span class="o">:</span> <span class="nx">Dashboard</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 设置默认布局
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">defaultLayout</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="nx">i</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">component</span><span class="o">:</span> <span class="s1">&#39;ExampleWidget&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;便利贴&#39;</span><span class="p">,</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">w</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">h</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">params</span><span class="o">:</span> <span class="p">{</span> <span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;hello world!&#39;</span> <span class="p">}},</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<blockquote>
<p>完整例子详见 <a href="https://github.com/Lruihao/vue-el-demo/blob/main/src/views/dashboard/index.vue"target="_blank" rel="external nofollow noopener noreferrer"><code>@/views/dashboard/index.vue</code><i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 页面。</p>
</blockquote>
<h2 id="export">Export</h2>
<ul>
<li><code>registerComponents</code> (Function): 注册组件（widget.disabled 为 true 的组件不注册）
<ul>
<li>param <code>requireComponents</code> (Function): require.context 函数</li>
<li>return (Array) 已注册的组件列表</li>
</ul>
</li>
</ul>
<h2 id="provide">Provide</h2>
<p>提供当前 dashboard 实例给后代组件注入，用于后代组件访问容器内的属性或方法。</p>
<ul>
<li><code>$dashboard</code> (Object): 当前 dashboard 容器实例</li>
</ul>
<h2 id="data-properties">Data Properties</h2>
<ul>
<li><code>componentsList</code> (Array): 组件列表 e.g. [{ category: &lsquo;分类名称&rsquo;, components: [组件列表] }]</li>
<li><code>isCollapse</code> (Boolean): 是否折叠侧边栏</li>
<li><code>colNum</code> (Number): 栅格列数</li>
<li><code>rowHeight</code> (Number): 栅格行高</li>
<li><code>gaps</code> (Array): 栅格间隙 [水平间隙, 垂直间隙] e.g. [8, 8]</li>
<li><code>dashboardGrid</code> (Element): 可接收拖放的栅格容器</li>
<li><code>dashboardList</code> (Array): 仪表盘列表</li>
<li><code>dashboard</code> (Object): 仪表盘数据
<ul>
<li><code>id</code> (Number): 仪表盘 ID</li>
<li><code>route</code> (String): 路由名称</li>
<li><code>name</code> (String): 仪表盘名称</li>
<li><code>layout</code> (Array): 组件布局数据</li>
<li><code>aside</code> (String): 侧边栏位置（left 或 right）</li>
<li><code>compact</code> (Boolean): 是否垂直压缩布局</li>
<li><code>isDefault</code> (Boolean): 是否默认布局</li>
</ul>
</li>
<li><code>responsive</code> (Boolean): 是否响应式布局</li>
<li><code>loading</code> (Boolean): 是否正在加载/保存布局数据</li>
<li><code>defaultLayout</code> (Array): 默认布局组件数据</li>
<li><code>hasEditPermission</code> (Boolean): 是否有编辑权限</li>
<li><code>selectedCategory</code> (String): 已选中的组件分类</li>
<li><code>menuCollapse</code> (Boolean): 是否折叠组件分类菜单</li>
</ul>
<h2 id="computed-properties">Computed Properties</h2>
<ul>
<li><code>selectedDashboardId</code> (Number): 已选中的仪表盘 ID</li>
<li><code>components</code> (Array): 所有已注册组件，用于 dashboard 布局中的组件渲染，包含 <code>hidden</code> 为 <code>true</code> 的组件</li>
<li><code>componentsListAvailable</code> (Array): 过滤后的组件列表，用于组件列表显示，过滤 <code>hidden</code> 为 <code>true</code> 的组件，过滤组件列表为空的分类</li>
<li><code>componentsByCategory</code> (Array): 根据 selectedCategory 获取对应的组件列表</li>
</ul>
<h2 id="methods">Methods</h2>
<h3 id="notifymessage-type--success">notify(message, type = &lsquo;success&rsquo;)</h3>
<p>dashboard 显示通知</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>message</td>
<td><code>String</code></td>
<td>通知内容</td>
</tr>
<tr>
<td>type</td>
<td><code>String</code></td>
<td>通知类型，可选值：<code>success</code>、<code>warning</code>、<code>info</code>、<code>error</code></td>
</tr>
</tbody>
</table>
<h3 id="addcomponentscategory-components-isprepend--false">addComponents(category, components, isPrepend = false)</h3>
<p>添加组件列表及分类</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>category</td>
<td><code>String</code></td>
<td>组件分类</td>
</tr>
<tr>
<td>components</td>
<td><code>Array</code></td>
<td>组件列表</td>
</tr>
<tr>
<td>isPrepend</td>
<td><code>Boolean</code></td>
<td>是否追加到组件列表开头</td>
</tr>
</tbody>
</table>
<h3 id="selectcategorycategory">selectCategory(category)</h3>
<p>选中组件分类时显示对应的组件列表</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>category</td>
<td><code>String</code></td>
<td>组件分类</td>
</tr>
</tbody>
</table>
<h3 id="switchdashboardid">switchDashboard(id)</h3>
<p>切换仪表盘</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td><code>Number/String</code></td>
<td>仪表盘 ID 或者 &rsquo;new’</td>
</tr>
</tbody>
</table>
<h3 id="handlecommandtype">handleCommand(type)</h3>
<p>处理仪表盘操作</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td><code>String</code></td>
<td>操作类型，可选值：<code>copy</code>、<code>edit</code>、<code>delete</code></td>
</tr>
</tbody>
</table>
<h3 id="guide">guide()</h3>
<p>打开新手引导</p>
<h3 id="refreshallitems">refreshAllItems()</h3>
<p>刷新容器内所有组件的数据</p>
<h3 id="clearlayout">clearLayout()</h3>
<p>清空布局</p>
<h3 id="idincrement">idIncrement()</h3>
<p>生成一个自增的 id，用于组件的唯一标识 i</p>
<h3 id="sortitems">sortItems()</h3>
<p>对 layout 数据进行排序，按照 y 坐标从小到大，x 坐标从小到大的顺序</p>
<h3 id="additemcomponent-widget">addItem(component, widget)</h3>
<p>添加组件到 layout 中</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>component</td>
<td><code>String</code></td>
<td>组件名称，对应组件的 name 属性</td>
</tr>
<tr>
<td>widget</td>
<td><code>Object</code></td>
<td>组件配置对象，对应组件的 widget 属性</td>
</tr>
</tbody>
</table>
<h3 id="removeitemi-save--true">removeItem(i, save = true)</h3>
<p>从 layout 中移除组件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td><code>String</code></td>
<td>组件的唯一标识</td>
</tr>
<tr>
<td>save</td>
<td><code>Boolean</code></td>
<td>是否立即保存布局数据</td>
</tr>
</tbody>
</table>
<h3 id="confirmremoveitemi">confirmRemoveItem(i)</h3>
<p>用户删除组件双重确认</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td><code>String</code></td>
<td>组件的唯一标识</td>
</tr>
</tbody>
</table>
<h3 id="hashookcomponent-hook">hasHook(component, hook)</h3>
<p>判断组件是否有配置对应的 hook</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>component</td>
<td><code>String</code></td>
<td>组件名称，对应组件的 name 属性</td>
</tr>
<tr>
<td>hook</td>
<td><code>String</code></td>
<td>需要判断的 hook 名称</td>
</tr>
</tbody>
</table>
<h3 id="triggerhookitem-hook-args---save--false">triggerHook(item, hook, args = [], save = false)</h3>
<p>容器内的组件触发对应的 hook</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>item</td>
<td><code>Object</code></td>
<td>组件实例数据，<a href="https://jbaysolutions.github.io/vue-grid-layout/zh/guide/properties.html#griditem"target="_blank" rel="external nofollow noopener noreferrer">参考文档<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></td>
</tr>
<tr>
<td>hook</td>
<td><code>String</code></td>
<td>需要触发的 hook 名称</td>
</tr>
<tr>
<td>args</td>
<td><code>Array</code></td>
<td>传递给 hook 的其他参数</td>
</tr>
<tr>
<td>save</td>
<td><code>Boolean</code></td>
<td>触发 hook 后是否立即保存布局数据</td>
</tr>
</tbody>
</table>
<h3 id="mouseingridx-y">mouseInGrid(x, y)</h3>
<p>判断鼠标是否在容器内</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td><code>Number</code></td>
<td>鼠标 x 坐标</td>
</tr>
<tr>
<td>y</td>
<td><code>Number</code></td>
<td>鼠标 y 坐标</td>
</tr>
</tbody>
</table>
<h3 id="removeunexistitemsfromlayout">removeUnExistItems(fromLayout)</h3>
<p>移除 layout 中不存在于所有已注册组件的组件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>fromLayout</td>
<td><code>Object</code></td>
<td>layout 数据</td>
</tr>
</tbody>
</table>
<h3 id="dragstarte">dragStart(e)</h3>
<p>开始拖动 组件/侧栏 时，设置拖动来源</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="dragende">dragEnd(e)</h3>
<p>结束拖动 组件/侧栏 时，清空拖动来源</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="dragcomponent-widget-e">drag(component, widget, e)</h3>
<p>拖动组件时，记录拖动的组件信息和显示拖动轨迹</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>component</td>
<td><code>String</code></td>
<td>组件名称，对应组件的 name 属性</td>
</tr>
<tr>
<td>widget</td>
<td><code>Object</code></td>
<td>组件配置对象，对应组件的 widget 属性</td>
</tr>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="ondragoverdashboarde">onDragoverDashboard(e)</h3>
<p>拖动组件经过容器时，阻止默认事件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="ondropdashboarde">onDropDashboard(e)</h3>
<p>拖动 组件/侧栏 放置到容器内时的拖放事件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="getdashboard">getDashboard()</h3>
<p>通过 route 获取 dashboard 数组（后端自动获取组织 ID）</p>
<h3 id="savedashboard">saveDashboard()</h3>
<p>保存 dashboard</p>
<h3 id="adddashboard">addDashboard()</h3>
<p>新增 dashboard</p>
<h3 id="updatedashboard">updateDashboard()</h3>
<p>更新 dashboard</p>
<h3 id="deletedashboard">deleteDashboard()</h3>
<p>删除 dashboard</p>
<!-- link reference definition -->
<!-- footnote reference definition -->
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>基于 Vue2 和 <a href="https://jbaysolutions.github.io/vue-grid-layout/zh/"target="_blank" rel="external nofollow noopener noreferrer">vue-grid-layout<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 开发的拖拽式 Dashboard 模板，<a href="https://github.com/Lruihao/vue-el-demo/tree/main/src/components/Dashboard"target="_blank" rel="external nofollow noopener noreferrer">查看源码<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>拖拽式仪表盘 - 组件配置文档</title><link>https://lruihao.cn/posts/dashborad-widget-docs/</link><pubDate>Thu, 12 Oct 2023 19:41:23 +0800</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/dashborad-widget-docs/</guid><description><![CDATA[<p>本文将对 Dashboard 组件的使用方法进行介绍。</p>
<h2 id="a-note-on-terminology">A note on terminology</h2>
<p>“Widget（小部件）” 和 “Component（组件）” 都是计算机科学中常见的术语，用于描述可重复使用的用户界面元素。Widget 通常更简单，具有预定义的样式和功能，而 Component 可以更灵活、可定制，并具有更丰富的行为和交互性。Widget 更倾向于描述独立的、自包含的小型组件，而 Component 则更倾向于描述较大规模的、可组合的用户界面元素。</p>
<p>Vue 项目通常选用 Component，与之相比仪表盘组件功能更加局限，使用 Widget 来描述显然更符合实际情况。</p>
<h2 id="widget-example">Widget Example</h2>
<p>完整例子详见 <a href="https://github.com/Lruihao/vue-el-demo/blob/main/src/components/Dashboard/widgets/example.vue"target="_blank" rel="external nofollow noopener noreferrer"><code>@/components/Dashboard/widgets/example.vue</code><i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 组件。</p>
<h2 id="inject">Inject</h2>
<p>dashboard 组件及其后代组件可以通过注入 <code>$dashboard</code> 访问容器中的属性或方法。</p>
<ul>
<li><code>$dashboard</code> (Object): 当前 dashboard 容器实例</li>
</ul>
<p>例如：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;ExampleWidget&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">widget</span><span class="o">:</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">inject</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;$dashboard&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 组件通过 this.$dashboard 访问容器中的属性或方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">$dashboard</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span><span class="s1">&#39;example widget mounted&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="props">Props</h2>
<p>容器中的组件可以接收一些上层传递的参数，如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>item</code></td>
<td><code>Object</code></td>
<td>组件实例数据</td>
</tr>
<tr>
<td><code>params</code></td>
<td><code>Object</code></td>
<td>组件参数，用于接收用户已配置的参数，支持 <code>.sync</code> 修饰符</td>
</tr>
</tbody>
</table>
<h2 id="widget-properties">Widget Properties</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th style="text-align:center">必填</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td><code>String</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件名称，必须且唯一（同 Vue 组件 <code>name</code> 属性）</td>
</tr>
<tr>
<td><code>widget</code></td>
<td><code>Object</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件配置信息，<a href="https://jbaysolutions.github.io/vue-grid-layout/zh/guide/properties.html#griditem"target="_blank" rel="external nofollow noopener noreferrer">参考文档<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></td>
</tr>
</tbody>
</table>
<p><code>widget</code> 配置如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th style="text-align:center">必填</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td><code>String</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件名称，用于在组件列表中显示组件名称</td>
</tr>
<tr>
<td><code>icon</code></td>
<td><code>String</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件图标，用于在组件列表中显示组件图标，支持 <code>el-icon</code>、<code>iconfont</code> 和 <code>svg-icon</code></td>
</tr>
<tr>
<td><code>params</code></td>
<td><code>Object</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件参数，一般搭配 <code>setting</code> 钩子函数使用</td>
</tr>
<tr>
<td><code>disabled</code></td>
<td><code>Boolean</code></td>
<td style="text-align:center"><code>N</code></td>
<td>是否禁用组件，设置为 <code>true</code> 则不会被注册（组件弃用时可设置为 <code>true</code>）</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td><code>Boolean</code></td>
<td style="text-align:center"><code>N</code></td>
<td>是否隐藏组件，设置为 <code>true</code> 则不会在组件列表中显示（组件即将弃用时可设置为 <code>true</code>）</td>
</tr>
<tr>
<td><code>w</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件宽度</td>
</tr>
<tr>
<td><code>h</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件高度</td>
</tr>
<tr>
<td><code>minW</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件最小宽度</td>
</tr>
<tr>
<td><code>minH</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件最小高度</td>
</tr>
<tr>
<td><code>maxW</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件最大宽度</td>
</tr>
<tr>
<td><code>maxH</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件最大高度</td>
</tr>
<tr>
<td><code>isResizable</code></td>
<td><code>Boolean</code></td>
<td style="text-align:center"><code>N</code></td>
<td>是否可调整大小</td>
</tr>
</tbody>
</table>
<h2 id="widget-events">Widget Events</h2>
<table>
<thead>
<tr>
<th>事件名</th>
<th>类型</th>
<th>说明</th>
<th>回调参数</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>refresh</code></td>
<td><code>Function</code></td>
<td>hook for refresh widget item</td>
<td>item</td>
</tr>
<tr>
<td><code>setting</code></td>
<td><code>Function</code></td>
<td>hook for setting widget item</td>
<td>item</td>
</tr>
<tr>
<td><code>move</code></td>
<td><code>Function</code></td>
<td>hook for moving widget item</td>
<td>item, &hellip;args</td>
</tr>
<tr>
<td><code>moved</code></td>
<td><code>Function</code></td>
<td>hook for moved widget item</td>
<td>item, &hellip;args</td>
</tr>
<tr>
<td><code>resize</code></td>
<td><code>Function</code></td>
<td>hook for resizing widget item</td>
<td>item, &hellip;args</td>
</tr>
<tr>
<td><code>resized</code></td>
<td><code>Function</code></td>
<td>hook for resized widget item</td>
<td>item, &hellip;args</td>
</tr>
<tr>
<td><code>containerResized</code></td>
<td><code>Function</code></td>
<td>hook for resized grid container</td>
<td>item, &hellip;args</td>
</tr>
</tbody>
</table>
<blockquote>
<p>参数说明：</p>
<ul>
<li>item：<code>Object</code>，组件实例数据，<a href="https://jbaysolutions.github.io/vue-grid-layout/zh/guide/properties.html#griditem"target="_blank" rel="external nofollow noopener noreferrer">参考文档<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>args：<code>Array</code>，传递给事件的其他参数，<a href="https://jbaysolutions.github.io/vue-grid-layout/zh/guide/events.html#griditem"target="_blank" rel="external nofollow noopener noreferrer">参考文档<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
</blockquote>
<h2 id="widget-styles">Widget Styles</h2>
<p>组件默认含有 <code>box-shadow</code>、<code>background-color</code> 等样式，可在组件根节点通过以下样式调整或根据实际情况自行覆盖。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>shadow</code></td>
<td><code>prop</code></td>
<td>组件阴影，可选值：<code>always</code>、<code>hover</code>、<code>never</code>，默认值：<code>always</code></td>
</tr>
<tr>
<td><code>.bg-transparent</code></td>
<td><code>class</code></td>
<td>组件背景透明</td>
</tr>
</tbody>
</table>
<h2 id="widget-directory">Widget Directory</h2>
<p>dashboard 组件统一存放目录：</p>
<ul>
<li>通用组件：<code>@/components/Dashboard/widgets/</code></li>
<li>模块组件：<code>@/views/{module_name}/widgets/</code></li>
</ul>
<!-- link reference definition -->]]></description></item><item><title>拖拽式仪表盘 - 组件配置文档</title><link>https://lruihao.cn/posts/dashborad-widget-docs/</link><pubDate>Thu, 12 Oct 2023 19:41:23 +0800</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/dashborad-widget-docs/</guid><description><![CDATA[<p>本文将对 Dashboard 组件的使用方法进行介绍。</p>
<h2 id="a-note-on-terminology">A note on terminology</h2>
<p>“Widget（小部件）” 和 “Component（组件）” 都是计算机科学中常见的术语，用于描述可重复使用的用户界面元素。Widget 通常更简单，具有预定义的样式和功能，而 Component 可以更灵活、可定制，并具有更丰富的行为和交互性。Widget 更倾向于描述独立的、自包含的小型组件，而 Component 则更倾向于描述较大规模的、可组合的用户界面元素。</p>
<p>Vue 项目通常选用 Component，与之相比仪表盘组件功能更加局限，使用 Widget 来描述显然更符合实际情况。</p>
<h2 id="widget-example">Widget Example</h2>
<p>完整例子详见 <a href="https://github.com/Lruihao/vue-el-demo/blob/main/src/components/Dashboard/widgets/example.vue"target="_blank" rel="external nofollow noopener noreferrer"><code>@/components/Dashboard/widgets/example.vue</code><i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 组件。</p>
<h2 id="inject">Inject</h2>
<p>dashboard 组件及其后代组件可以通过注入 <code>$dashboard</code> 访问容器中的属性或方法。</p>
<ul>
<li><code>$dashboard</code> (Object): 当前 dashboard 容器实例</li>
</ul>
<p>例如：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;ExampleWidget&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">widget</span><span class="o">:</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">inject</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;$dashboard&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 组件通过 this.$dashboard 访问容器中的属性或方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">$dashboard</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span><span class="s1">&#39;example widget mounted&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="props">Props</h2>
<p>容器中的组件可以接收一些上层传递的参数，如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>item</code></td>
<td><code>Object</code></td>
<td>组件实例数据</td>
</tr>
<tr>
<td><code>params</code></td>
<td><code>Object</code></td>
<td>组件参数，用于接收用户已配置的参数，支持 <code>.sync</code> 修饰符</td>
</tr>
</tbody>
</table>
<h2 id="widget-properties">Widget Properties</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th style="text-align:center">必填</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td><code>String</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件名称，必须且唯一（同 Vue 组件 <code>name</code> 属性）</td>
</tr>
<tr>
<td><code>widget</code></td>
<td><code>Object</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件配置信息，<a href="https://jbaysolutions.github.io/vue-grid-layout/zh/guide/properties.html#griditem"target="_blank" rel="external nofollow noopener noreferrer">参考文档<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></td>
</tr>
</tbody>
</table>
<p><code>widget</code> 配置如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th style="text-align:center">必填</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td><code>String</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件名称，用于在组件列表中显示组件名称</td>
</tr>
<tr>
<td><code>icon</code></td>
<td><code>String</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件图标，用于在组件列表中显示组件图标，支持 <code>el-icon</code>、<code>iconfont</code> 和 <code>svg-icon</code></td>
</tr>
<tr>
<td><code>params</code></td>
<td><code>Object</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件参数，一般搭配 <code>setting</code> 钩子函数使用</td>
</tr>
<tr>
<td><code>disabled</code></td>
<td><code>Boolean</code></td>
<td style="text-align:center"><code>N</code></td>
<td>是否禁用组件，设置为 <code>true</code> 则不会被注册（组件弃用时可设置为 <code>true</code>）</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td><code>Boolean</code></td>
<td style="text-align:center"><code>N</code></td>
<td>是否隐藏组件，设置为 <code>true</code> 则不会在组件列表中显示（组件即将弃用时可设置为 <code>true</code>）</td>
</tr>
<tr>
<td><code>w</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件宽度</td>
</tr>
<tr>
<td><code>h</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>Y</code></td>
<td>组件高度</td>
</tr>
<tr>
<td><code>minW</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件最小宽度</td>
</tr>
<tr>
<td><code>minH</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件最小高度</td>
</tr>
<tr>
<td><code>maxW</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件最大宽度</td>
</tr>
<tr>
<td><code>maxH</code></td>
<td><code>Number</code></td>
<td style="text-align:center"><code>N</code></td>
<td>组件最大高度</td>
</tr>
<tr>
<td><code>isResizable</code></td>
<td><code>Boolean</code></td>
<td style="text-align:center"><code>N</code></td>
<td>是否可调整大小</td>
</tr>
</tbody>
</table>
<h2 id="widget-events">Widget Events</h2>
<table>
<thead>
<tr>
<th>事件名</th>
<th>类型</th>
<th>说明</th>
<th>回调参数</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>refresh</code></td>
<td><code>Function</code></td>
<td>hook for refresh widget item</td>
<td>item</td>
</tr>
<tr>
<td><code>setting</code></td>
<td><code>Function</code></td>
<td>hook for setting widget item</td>
<td>item</td>
</tr>
<tr>
<td><code>move</code></td>
<td><code>Function</code></td>
<td>hook for moving widget item</td>
<td>item, &hellip;args</td>
</tr>
<tr>
<td><code>moved</code></td>
<td><code>Function</code></td>
<td>hook for moved widget item</td>
<td>item, &hellip;args</td>
</tr>
<tr>
<td><code>resize</code></td>
<td><code>Function</code></td>
<td>hook for resizing widget item</td>
<td>item, &hellip;args</td>
</tr>
<tr>
<td><code>resized</code></td>
<td><code>Function</code></td>
<td>hook for resized widget item</td>
<td>item, &hellip;args</td>
</tr>
<tr>
<td><code>containerResized</code></td>
<td><code>Function</code></td>
<td>hook for resized grid container</td>
<td>item, &hellip;args</td>
</tr>
</tbody>
</table>
<blockquote>
<p>参数说明：</p>
<ul>
<li>item：<code>Object</code>，组件实例数据，<a href="https://jbaysolutions.github.io/vue-grid-layout/zh/guide/properties.html#griditem"target="_blank" rel="external nofollow noopener noreferrer">参考文档<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>args：<code>Array</code>，传递给事件的其他参数，<a href="https://jbaysolutions.github.io/vue-grid-layout/zh/guide/events.html#griditem"target="_blank" rel="external nofollow noopener noreferrer">参考文档<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
</blockquote>
<h2 id="widget-styles">Widget Styles</h2>
<p>组件默认含有 <code>box-shadow</code>、<code>background-color</code> 等样式，可在组件根节点通过以下样式调整或根据实际情况自行覆盖。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>shadow</code></td>
<td><code>prop</code></td>
<td>组件阴影，可选值：<code>always</code>、<code>hover</code>、<code>never</code>，默认值：<code>always</code></td>
</tr>
<tr>
<td><code>.bg-transparent</code></td>
<td><code>class</code></td>
<td>组件背景透明</td>
</tr>
</tbody>
</table>
<h2 id="widget-directory">Widget Directory</h2>
<p>dashboard 组件统一存放目录：</p>
<ul>
<li>通用组件：<code>@/components/Dashboard/widgets/</code></li>
<li>模块组件：<code>@/views/{module_name}/widgets/</code></li>
</ul>
<!-- link reference definition -->]]></description></item><item><title>拖拽式仪表盘 - 布局模板文档</title><link>https://lruihao.cn/posts/dashborad-template-docs/</link><pubDate>Thu, 12 Oct 2023 19:27:49 +0800</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/dashborad-template-docs/</guid><description><![CDATA[<p><code>Dashboard</code> 组件 <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> 是一个公共模板组件，用于快速创建 Dashboard 页面。</p>
<h2 id="basic-usage">Basic Usage</h2>
<ol>
<li>
<p>每个模块的 dashboard 页面可继承 <code>Dashboard</code> 组件，如：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Dashboard</span> <span class="nx">from</span> <span class="s1">&#39;@/components/Dashboard&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kr">extends</span><span class="o">:</span> <span class="nx">Dashboard</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用 <code>registerComponents</code> 函数注册组件，通用组件模板中默认已导入，模块组件需要自行导入，如：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Dashboard</span><span class="p">,</span> <span class="p">{</span> <span class="nx">registerComponents</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;@/components/Dashboard&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 加载 widgets 目录下所有组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">requireComponents</span> <span class="o">=</span> <span class="nx">require</span><span class="p">.</span><span class="nx">context</span><span class="p">(</span><span class="s1">&#39;./widgets&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="sr">/\.vue$/</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">components</span> <span class="o">=</span> <span class="nx">registerComponents</span><span class="p">(</span><span class="nx">requireComponents</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kr">extends</span><span class="o">:</span> <span class="nx">Dashboard</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">created</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 加载组件列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">addComponents</span><span class="p">(</span><span class="s1">&#39;组件分类&#39;</span><span class="p">,</span> <span class="nx">components</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>设置默认布局</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">Dashboard</span><span class="p">,</span> <span class="p">{</span> <span class="nx">registerComponents</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;@/components/Dashboard&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Dashboard&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kr">extends</span><span class="o">:</span> <span class="nx">Dashboard</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 设置默认布局
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">defaultLayout</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span> <span class="nx">i</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">component</span><span class="o">:</span> <span class="s1">&#39;ExampleWidget&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;便利贴&#39;</span><span class="p">,</span> <span class="nx">x</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">w</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">h</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">params</span><span class="o">:</span> <span class="p">{</span> <span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;hello world!&#39;</span> <span class="p">}},</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<blockquote>
<p>完整例子详见 <a href="https://github.com/Lruihao/vue-el-demo/blob/main/src/views/dashboard/index.vue"target="_blank" rel="external nofollow noopener noreferrer"><code>@/views/dashboard/index.vue</code><i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 页面。</p>
</blockquote>
<h2 id="export">Export</h2>
<ul>
<li><code>registerComponents</code> (Function): 注册组件（widget.disabled 为 true 的组件不注册）
<ul>
<li>param <code>requireComponents</code> (Function): require.context 函数</li>
<li>return (Array) 已注册的组件列表</li>
</ul>
</li>
</ul>
<h2 id="provide">Provide</h2>
<p>提供当前 dashboard 实例给后代组件注入，用于后代组件访问容器内的属性或方法。</p>
<ul>
<li><code>$dashboard</code> (Object): 当前 dashboard 容器实例</li>
</ul>
<h2 id="data-properties">Data Properties</h2>
<ul>
<li><code>componentsList</code> (Array): 组件列表 e.g. [{ category: &lsquo;分类名称&rsquo;, components: [组件列表] }]</li>
<li><code>isCollapse</code> (Boolean): 是否折叠侧边栏</li>
<li><code>colNum</code> (Number): 栅格列数</li>
<li><code>rowHeight</code> (Number): 栅格行高</li>
<li><code>gaps</code> (Array): 栅格间隙 [水平间隙, 垂直间隙] e.g. [8, 8]</li>
<li><code>dashboardGrid</code> (Element): 可接收拖放的栅格容器</li>
<li><code>dashboardList</code> (Array): 仪表盘列表</li>
<li><code>dashboard</code> (Object): 仪表盘数据
<ul>
<li><code>id</code> (Number): 仪表盘 ID</li>
<li><code>route</code> (String): 路由名称</li>
<li><code>name</code> (String): 仪表盘名称</li>
<li><code>layout</code> (Array): 组件布局数据</li>
<li><code>aside</code> (String): 侧边栏位置（left 或 right）</li>
<li><code>compact</code> (Boolean): 是否垂直压缩布局</li>
<li><code>isDefault</code> (Boolean): 是否默认布局</li>
</ul>
</li>
<li><code>responsive</code> (Boolean): 是否响应式布局</li>
<li><code>loading</code> (Boolean): 是否正在加载/保存布局数据</li>
<li><code>defaultLayout</code> (Array): 默认布局组件数据</li>
<li><code>hasEditPermission</code> (Boolean): 是否有编辑权限</li>
<li><code>selectedCategory</code> (String): 已选中的组件分类</li>
<li><code>menuCollapse</code> (Boolean): 是否折叠组件分类菜单</li>
</ul>
<h2 id="computed-properties">Computed Properties</h2>
<ul>
<li><code>selectedDashboardId</code> (Number): 已选中的仪表盘 ID</li>
<li><code>components</code> (Array): 所有已注册组件，用于 dashboard 布局中的组件渲染，包含 <code>hidden</code> 为 <code>true</code> 的组件</li>
<li><code>componentsListAvailable</code> (Array): 过滤后的组件列表，用于组件列表显示，过滤 <code>hidden</code> 为 <code>true</code> 的组件，过滤组件列表为空的分类</li>
<li><code>componentsByCategory</code> (Array): 根据 selectedCategory 获取对应的组件列表</li>
</ul>
<h2 id="methods">Methods</h2>
<h3 id="notifymessage-type--success">notify(message, type = &lsquo;success&rsquo;)</h3>
<p>dashboard 显示通知</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>message</td>
<td><code>String</code></td>
<td>通知内容</td>
</tr>
<tr>
<td>type</td>
<td><code>String</code></td>
<td>通知类型，可选值：<code>success</code>、<code>warning</code>、<code>info</code>、<code>error</code></td>
</tr>
</tbody>
</table>
<h3 id="addcomponentscategory-components-isprepend--false">addComponents(category, components, isPrepend = false)</h3>
<p>添加组件列表及分类</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>category</td>
<td><code>String</code></td>
<td>组件分类</td>
</tr>
<tr>
<td>components</td>
<td><code>Array</code></td>
<td>组件列表</td>
</tr>
<tr>
<td>isPrepend</td>
<td><code>Boolean</code></td>
<td>是否追加到组件列表开头</td>
</tr>
</tbody>
</table>
<h3 id="selectcategorycategory">selectCategory(category)</h3>
<p>选中组件分类时显示对应的组件列表</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>category</td>
<td><code>String</code></td>
<td>组件分类</td>
</tr>
</tbody>
</table>
<h3 id="switchdashboardid">switchDashboard(id)</h3>
<p>切换仪表盘</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td><code>Number/String</code></td>
<td>仪表盘 ID 或者 &rsquo;new’</td>
</tr>
</tbody>
</table>
<h3 id="handlecommandtype">handleCommand(type)</h3>
<p>处理仪表盘操作</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td><code>String</code></td>
<td>操作类型，可选值：<code>copy</code>、<code>edit</code>、<code>delete</code></td>
</tr>
</tbody>
</table>
<h3 id="guide">guide()</h3>
<p>打开新手引导</p>
<h3 id="refreshallitems">refreshAllItems()</h3>
<p>刷新容器内所有组件的数据</p>
<h3 id="clearlayout">clearLayout()</h3>
<p>清空布局</p>
<h3 id="idincrement">idIncrement()</h3>
<p>生成一个自增的 id，用于组件的唯一标识 i</p>
<h3 id="sortitems">sortItems()</h3>
<p>对 layout 数据进行排序，按照 y 坐标从小到大，x 坐标从小到大的顺序</p>
<h3 id="additemcomponent-widget">addItem(component, widget)</h3>
<p>添加组件到 layout 中</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>component</td>
<td><code>String</code></td>
<td>组件名称，对应组件的 name 属性</td>
</tr>
<tr>
<td>widget</td>
<td><code>Object</code></td>
<td>组件配置对象，对应组件的 widget 属性</td>
</tr>
</tbody>
</table>
<h3 id="removeitemi-save--true">removeItem(i, save = true)</h3>
<p>从 layout 中移除组件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td><code>String</code></td>
<td>组件的唯一标识</td>
</tr>
<tr>
<td>save</td>
<td><code>Boolean</code></td>
<td>是否立即保存布局数据</td>
</tr>
</tbody>
</table>
<h3 id="confirmremoveitemi">confirmRemoveItem(i)</h3>
<p>用户删除组件双重确认</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td><code>String</code></td>
<td>组件的唯一标识</td>
</tr>
</tbody>
</table>
<h3 id="hashookcomponent-hook">hasHook(component, hook)</h3>
<p>判断组件是否有配置对应的 hook</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>component</td>
<td><code>String</code></td>
<td>组件名称，对应组件的 name 属性</td>
</tr>
<tr>
<td>hook</td>
<td><code>String</code></td>
<td>需要判断的 hook 名称</td>
</tr>
</tbody>
</table>
<h3 id="triggerhookitem-hook-args---save--false">triggerHook(item, hook, args = [], save = false)</h3>
<p>容器内的组件触发对应的 hook</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>item</td>
<td><code>Object</code></td>
<td>组件实例数据，<a href="https://jbaysolutions.github.io/vue-grid-layout/zh/guide/properties.html#griditem"target="_blank" rel="external nofollow noopener noreferrer">参考文档<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></td>
</tr>
<tr>
<td>hook</td>
<td><code>String</code></td>
<td>需要触发的 hook 名称</td>
</tr>
<tr>
<td>args</td>
<td><code>Array</code></td>
<td>传递给 hook 的其他参数</td>
</tr>
<tr>
<td>save</td>
<td><code>Boolean</code></td>
<td>触发 hook 后是否立即保存布局数据</td>
</tr>
</tbody>
</table>
<h3 id="mouseingridx-y">mouseInGrid(x, y)</h3>
<p>判断鼠标是否在容器内</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td><code>Number</code></td>
<td>鼠标 x 坐标</td>
</tr>
<tr>
<td>y</td>
<td><code>Number</code></td>
<td>鼠标 y 坐标</td>
</tr>
</tbody>
</table>
<h3 id="removeunexistitemsfromlayout">removeUnExistItems(fromLayout)</h3>
<p>移除 layout 中不存在于所有已注册组件的组件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>fromLayout</td>
<td><code>Object</code></td>
<td>layout 数据</td>
</tr>
</tbody>
</table>
<h3 id="dragstarte">dragStart(e)</h3>
<p>开始拖动 组件/侧栏 时，设置拖动来源</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="dragende">dragEnd(e)</h3>
<p>结束拖动 组件/侧栏 时，清空拖动来源</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="dragcomponent-widget-e">drag(component, widget, e)</h3>
<p>拖动组件时，记录拖动的组件信息和显示拖动轨迹</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>component</td>
<td><code>String</code></td>
<td>组件名称，对应组件的 name 属性</td>
</tr>
<tr>
<td>widget</td>
<td><code>Object</code></td>
<td>组件配置对象，对应组件的 widget 属性</td>
</tr>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="ondragoverdashboarde">onDragoverDashboard(e)</h3>
<p>拖动组件经过容器时，阻止默认事件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="ondropdashboarde">onDropDashboard(e)</h3>
<p>拖动 组件/侧栏 放置到容器内时的拖放事件</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e</td>
<td><code>Event</code></td>
<td>event</td>
</tr>
</tbody>
</table>
<h3 id="getdashboard">getDashboard()</h3>
<p>通过 route 获取 dashboard 数组（后端自动获取组织 ID）</p>
<h3 id="savedashboard">saveDashboard()</h3>
<p>保存 dashboard</p>
<h3 id="adddashboard">addDashboard()</h3>
<p>新增 dashboard</p>
<h3 id="updatedashboard">updateDashboard()</h3>
<p>更新 dashboard</p>
<h3 id="deletedashboard">deleteDashboard()</h3>
<p>删除 dashboard</p>
<!-- link reference definition -->
<!-- footnote reference definition -->
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>基于 Vue2 和 <a href="https://jbaysolutions.github.io/vue-grid-layout/zh/"target="_blank" rel="external nofollow noopener noreferrer">vue-grid-layout<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 开发的拖拽式 Dashboard 模板，<a href="https://github.com/Lruihao/vue-el-demo/tree/main/src/components/Dashboard"target="_blank" rel="external nofollow noopener noreferrer">查看源码<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>拖拽式仪表盘 - 功能需求分析</title><link>https://lruihao.cn/posts/dashboard-analysis/</link><pubDate>Thu, 12 Oct 2023 15:37:30 +0800</pubDate><author>Lruihao</author><guid>https://lruihao.cn/posts/dashboard-analysis/</guid><description><![CDATA[<h2 id="仪表盘简介">仪表盘简介</h2>
<p>仪表盘（dashboard）作为一种直观、灵活的数据可视化工具，正在越来越多地应用于各种领域，帮助用户实时监控和分析数据。常见于各类数据分析平台、数据可视化平台、数据大屏等场景。</p>
<p>传统的仪表盘往往是开发者固定好的，用户只能使用，无法自定义。而拖拽式仪表盘则可以让用户自由地选择、拖拽、调整仪表盘中的各种组件，从而实现自定义的仪表盘。</p>
<h2 id="功能需求">功能需求</h2>
<p>由于本系列文章写作在设计和开发之后，所以先一睹为快，看看最终的效果：<a href="https://lruihao.github.io/vue-el-demo/#/dashboard/index"target="_blank" rel="external nofollow noopener noreferrer">在线 Demo<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>技术背景是基于 Vue2 实现，功能需求大致如下：</p>
<h3 id="布局需求">布局需求</h3>
<p>仪表盘布局是拖拽式仪表盘的核心功能之一。布局应该是一个可复用的模板，因为对于一个中后台系统，往往会有多个仪表盘，所有基础功能应该提炼出来，以便于快速复用。</p>
<ul>
<li>组件拖放到布局容器中时，用户应能够自由拖拽、调整组件的大小和位置，也可以对组件进行排序、刷新、删除等操作</li>
<li>允许创建、删除、复制布局，每个布局可以有不同的组件排列</li>
</ul>
<h3 id="组件需求">组件需求</h3>
<ul>
<li>统一的配置项（宽高、是否可调整大小、各种事件钩子等）</li>
<li>组件分类</li>
<li>自动加载组件列表</li>
<li>组件独立（每个组件有自己完整的生命周期）</li>
</ul>
<p>每个组件应该拥有相同的配置项，以便于按照相同的规范限制进行后续的组件开发。</p>
<p>组件统一存放在一个文件夹中，仪表盘模板自动加载这个文件夹中的所有组件到组件列表。</p>
<p>组件列表中的组件可以通过拖拽或者点击添加到布局容器中。</p>
<p>组件需要有分类，例如：模块 A 的组件、模块 B 的组件等。因为虽然系统中的每个模块的仪表盘只需要显示当前模块相关的图表组件，但是整个系统的仪表盘需要显示各个模块的图表统计数据，所以需要对组件进行分类。</p>
<p>另外，应该有一个通用分类，用于存放所有模块都可以使用的组件。例如：便签、天气组件、时间组件等。</p>
<h3 id="布局和组件交互">布局和组件交互</h3>
<p>仪表盘布局内通常有多个组件，布局和组件之间可能需要进行交互，例如：</p>
<ul>
<li>点击总的刷新按钮，所有组件都刷新；点击某个组件的刷新按钮，只刷新当前组件</li>
<li>点击某个组件的设置按钮，弹出设置框，设置当前组件的配置项保存到当前布局数据中</li>
<li>点击某个组件的删除按钮，从当前布局数据中删除当前组件</li>
<li>……</li>
</ul>
<h3 id="用户角色和权限管理需求">用户角色和权限管理需求</h3>
<p>在拖拽式仪表盘中，不同用户角色可能具有不同的访问权限和操作权限。</p>
<p>管理员拥有完整的权限：</p>
<ul>
<li>可以查看所有仪表盘</li>
<li>可以编辑所有仪表盘</li>
<li>可以删除除默认仪表盘之外的所有仪表盘</li>
<li>可以拖拽、调整所有组件在仪表盘中的位置和大小</li>
</ul>
<p>普通用户只能永远部分权限：</p>
<ul>
<li>可以查看所有仪表盘</li>
<li>工作台仪表盘可以新增、删除、编辑组织内可见的仪表盘布局</li>
<li>工作台仪表盘可以拖拽、调整组件在非默认仪表盘布局中的位置和大小</li>
<li>其他模块的仪表盘只能查看和刷新，不能编辑</li>
</ul>
<h2 id="总结">总结</h2>
<p>通过分析，简单来说，拖拽式仪表盘的功能需求主要包括：</p>
<ul>
<li>布局需求</li>
<li>组件需求</li>
<li>布局和组件交互</li>
<li>用户角色和权限管理需求</li>
</ul>
<p>了解清楚需求后，下一篇文章将探讨拖拽式仪表盘的布局模板设计。</p>
]]></description></item></channel></rss>